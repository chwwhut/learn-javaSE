构造器的特征
它具有与类相同的名称
它不声明返回值类型。（与声明为void不同）
不能被static、final、synchronized、abstract、native修饰，不能有
return语句返回值
构造器的作用：创建对象；给对象进行初始化
如：Order o = new Order(); Person p = new Person(“Peter”,15);
如同我们规定每个“人”一出生就必须先洗澡，我们就可以在“人”的
构造器中加入完成“洗澡”的程序代码，于是每个“人”一出生就会自
动完成“洗澡”，程序就不必再在每个人刚出生时一个一个地告诉他们
要“洗澡”了

 语法格式：
修饰符 类名 (参数列表) {
初始化语句；
}

根据参数不同，构造器可以分为如下两类：
隐式无参构造器（系统默认提供）
显式定义一个或多个构造器（无参、有参）
注 意：
Java语言中，每个类都至少有一个构造器
默认构造器的修饰符与所属类的修饰符一致
一旦显式定义了构造器，则系统不再提供默认构造器
一个类可以创建多个重载的构造器
父类的构造器不可被子类继承

构造器重载
 构造器一般用来创建对象的同时初始化对象。如
class Person{
String name;
int age;
public Person(String n , int a){ name=n; age=a;}
}
 构造器重载使得对象的创建更加灵活，方便创建各种不同的对象。
构造器重载举例：
public class Person{
public Person(String name, int age, Date d) {this(name,age);…}
public Person(String name, int age) {…}
public Person(String name, Date d) {…}
public Person(){…}
}
 构造器重载，参数列表必须不同

截止到目前，我们讲到了很多位置都可以对类的属性赋值。现总结这几个位
置，并指明赋值的先后顺序。
 赋值的位置：
① 默认初始化
② 显式初始化
③ 构造器中初始化
④ 通过“对象.属性“或“对象.方法”的方式赋值
 赋值的先后顺序：
① - ② - ③ - ④

JavaBean
JavaBean是一种Java语言写成的可重用组件。
所谓javaBean，是指符合如下标准的Java类：
类是公共的
有一个无参的公共的构造器
有属性，且有对应的get、set方法
 用户可以使用JavaBean将功能、处理、值、数据库访问和其他任何可以
用Java代码创造的对象进行打包，并且其他的开发者可以通过内部的JSP
页面、Servlet、其他JavaBean、applet程序或者应用来使用这些对象。用
户可以认为JavaBean提供了一种随时随地的复制和粘贴的功能，而不用关
心任何改变。

 在Java中，this关键字比较难理解，它的作用和其词义很接近。
 它在方法内部使用，即这个方法所属对象的引用；
 它在构造器内部使用，表示该构造器正在初始化的对象。
 this 可以调用类的属性、方法和构造器
 什么时候使用this关键字呢？
 当在方法内需要用到调用该方法的对象时，就用this。
具体的：我们可以用this来区分属性和局部变量。
比如：this.name = name;

1. 在任意方法或构造器内，如果使用当前类的成员变量或成员方法可以在其前面添加this，
增强程序的阅读性。不过，通常我们都习惯省略this。
2. 当形参与成员变量同名时，如果在方法内或构造器内需要使用成员变量，必须添加this来
表明该变量是类的成员变量
3.使用this访问属性和方法时，如果在本类中未找到，会从父类中查找
4.this可以作为一个类中构造器相互调用的特殊格式

注意：
 可以在类的构造器中使用"this(形参列表)"的方式，调用本类中重载的其他的构造器！
 明确：构造器中不能通过"this(形参列表)"的方式调用自身构造器
 如果一个类中声明了n个构造器，则最多有 n - 1个构造器中使用了"this(形参列表)"
 "this(形参列表)"必须声明在类的构造器的首行！
 在类的一个构造器中，最多只能声明一个"this(形参列表)"